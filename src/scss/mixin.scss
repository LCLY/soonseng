// mixin media query
$break-small: 576px;
$break-landscape: 480px;
$break-tablet: 768px;
$break-medium: 1200px;

// if have scss intellisense it will autocomplete the variable
$small-phone: small-phone;
$phone-only: phone-only;
$tablet-portrait-up: tablet-portrait-up;
$tablet-landscape-up: tablet-landscape-up;
$desktop-up: desktop-up;
$big-desktop-up: big-desktop-up;

// @mixin respond-to($media) {
//   @if $media == mobile {
//     //  < 576
//     @media only screen and (max-width: $break-small) {
//       @content;
//     }
//   } @else if $media == mobile-landscape {
//     @media only screen and (max-height: $break-landscape) {
//       @content;
//     }
//   } @else if $media == tablet {
//     @media only screen and (max-width: $break-tablet) {
//       @content;
//     }
//   } @else if $media == medium {
//     @media only screen and (min-width: $break-tablet + 1) and (max-width: $break-medium) {
//       @content;
//     }
//   }
// }
@mixin respond-to($range) {
  $small-phone-upper-boundary: 576px;
  $phone-upper-boundary: 768px;
  $tablet-portrait-upper-boundary: 900px;
  $tablet-landscape-upper-boundary: 1200px;
  $desktop-upper-boundary: 1800px;

  @if $range == small-phone {
    // <= 576px
    @media (max-width: #{$small-phone-upper-boundary}) {
      @content;
    }
  } @else if $range == phone-only {
    // >= 576px
    @media (min-width: #{$small-phone-upper-boundary}) {
      @content;
    }
  } @else if $range == tablet-portrait-up {
    //  >= 768px
    @media (min-width: $phone-upper-boundary) {
      @content;
    }
  } @else if $range == tablet-landscape-up {
    //  >= 900px
    @media (min-width: $tablet-portrait-upper-boundary) {
      @content;
    }
  } @else if $range == desktop-up {
    //  >= 1200px
    @media (min-width: $tablet-landscape-upper-boundary) {
      @content;
    }
  } @else if $range == big-desktop-up {
    //  >= 1800px
    @media (min-width: $desktop-upper-boundary) {
      @content;
    }
  }
}

/* =============================================================== */
// Create custom paddings and margin using classname
/* =============================================================== */
/* paddings */
@mixin padding-func($size) {
  padding: $size * 1rem;
}
@mixin padding-top-func($size) {
  padding-top: $size * 1rem;
}
@mixin padding-right-func($size) {
  padding-right: $size * 1rem;
}
@mixin padding-bottom-func($size) {
  padding-bottom: $size * 1rem;
}
@mixin padding-left-func($size) {
  padding-left: $size * 1rem;
}

/* margins */
@mixin margin-func($size) {
  margin: $size * 1rem;
}
@mixin margin-top-func($size) {
  margin-top: $size * 1rem;
}
@mixin margin-right-func($size) {
  margin-right: $size * 1rem;
}
@mixin margin-bottom-func($size) {
  margin-bottom: $size * 1rem;
}
@mixin margin-left-func($size) {
  margin-left: $size * 1rem;
}

@for $i from 1 through 10 {
  /* paddings */
  .padding-#{$i} {
    @include padding-func($i);
  }
  .padding_t-#{$i} {
    @include padding-top-func($i);
  }
  .padding_r-#{$i} {
    @include padding-right-func($i);
  }
  .padding_b-#{$i} {
    @include padding-bottom-func($i);
  }
  .padding_l-#{$i} {
    @include padding-left-func($i);
  }

  /* margins */
  .margin-#{$i} {
    @include margin-func($i);
  }
  .margin_t-#{$i} {
    @include margin-top-func($i);
  }
  .margin_r-#{$i} {
    @include margin-right-func($i);
  }
  .margin_b-#{$i} {
    @include margin-bottom-func($i);
  }
  .margin_l-#{$i} {
    @include margin-left-func($i);
  }
}

/* =============================================================== */
// creating shadow
/* =============================================================== */
@mixin shadow-func($horizontal, $vertical, $blur, $spread, $color) {
  box-shadow: $horizontal $vertical $blur $spread $color;
}

// take in whatever attribute and manipulate its properties
// for $color we can do e.g.
// @include alpha-attribute('background', rgba($secondary-color-1, 0.5), white);
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}
/* =============================================================== */
// darken color
/* =============================================================== */
@mixin darkenColor($color, $percentage) {
  background: darken($color, $percentage);
}

/* =============================================================== */
// Glass morphism
/* =============================================================== */
@mixin glassMorph(
  $frontLayerColor: rgba(255, 255, 255, 0.103),
  $blur: 20px,
  $secondLayerColor: rgba(44, 41, 41, 0.123),
  $borderRadius: 0
) {
  // main background
  position: relative;
  background: $frontLayerColor;
  backdrop-filter: blur($blur);
  -moz-backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border-radius: $borderRadius;
  transform: translateZ(0);
  will-change: translate, backdrop-filter;
  // second layer behind the main background
  &:before {
    content: '';
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: $borderRadius;
    background: $secondLayerColor;
  }
}
/* =============================================================== */
// Edit scrollbar size and color
/* =============================================================== */
@mixin customScrollbar(
  $scrollbarWidth: 0.5rem,
  $scrollbarHeight: 0.5rem,
  $borderRadius: 1rem,
  $backgroundColor: white,
  $hoverBackgroundColor: rgba(255, 255, 255, 0.678)
) {
  &::-webkit-scrollbar {
    width: $scrollbarWidth !important;
    height: $scrollbarHeight !important;
  }

  &::-webkit-scrollbar-thumb {
    background: $backgroundColor !important;
    border-radius: $borderRadius !important;
  }

  &::-webkit-scrollbar-thumb:hover {
    background: $hoverBackgroundColor !important;
  }
}

/* =============================================================== */
// Font with outlines
/* =============================================================== */
@mixin outlineFont($fontColor: black, $strokeColor: white, $strokeWidth: 1px) {
  color: $fontColor !important;
  -webkit-text-fill-color: $fontColor !important; /* Will override color (regardless of order) */
  -webkit-text-stroke-width: $strokeWidth !important;
  -webkit-text-stroke-color: $strokeColor !important;
}
